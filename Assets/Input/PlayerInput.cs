//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""InBoat"",
            ""id"": ""bd3a73fb-e33e-4072-973e-593a0e19f21d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""250c7338-3f2c-44e0-99d5-e984f418f379"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""86e4bd3b-572b-47a2-b1ee-dc98c2cdba3d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""feac9c0a-e55a-41dc-bf33-948a083076c8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""51f8f19f-2034-47b8-bf16-de89fd159caf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""89e0e3b2-f02b-40c0-bc88-a63314970183"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b7acc1c1-b6ae-40f7-8b9a-c97ab717e987"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""f8513d70-bb77-4c48-a82b-67d2dbfb3cef"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6530b74c-08d4-4d5d-b6ea-e7247807a31f"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ced18358-e486-4406-ac66-017f5f0326e9"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aa5b5dde-23cf-4a9e-b3db-c5b5e2d20870"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c45c996f-288f-4273-a4b1-71ce3e57ac8e"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""AsCharacter"",
            ""id"": ""de005e74-7bf7-48fa-9c99-86e8dce384c9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b7c3890d-0540-4d9d-b859-4a21da3fe75b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""76c28428-fe35-4932-8630-757fbd069ef8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""00a0b8f5-e954-4353-9977-4e191e665c64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""5417d514-6fc7-45bd-a873-84d0861ed447"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f3f38bb8-9926-4531-a4c1-6c6798a99fa7"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9373cd46-7dc0-4e93-bf5c-c048f0787775"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0e761d7e-ec16-41ec-8f6d-aa807b3900dc"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""db6fe59d-01c4-45c6-a1c9-2841c51f0f47"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a78a13f5-2fd0-4f90-af1c-90afc96d8e72"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f02afa9-9341-40f1-b974-2f74906320f8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TargetReticle"",
            ""id"": ""8b465318-aae0-4fd5-a5e1-d7c5706b88e6"",
            ""actions"": [
                {
                    ""name"": ""Target"",
                    ""type"": ""Value"",
                    ""id"": ""3797f70a-73bd-440c-b413-1ab90e3ee6e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""dd46b7ba-abc3-4b07-acad-eeb3dd6e3a74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""522ac5e5-e41c-4c4e-bf3f-9bb7721ac5f4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Target"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4d04633e-ad18-46c5-8579-76d1a809bfcf"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7d2011b9-918a-4ca4-8dd9-5dbb105c0a29"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""52531f08-73da-4d9b-95a5-eba9ec0cb895"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bf129276-b3e9-4ebd-8b64-e3b191352505"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c8e35618-ddbc-42d9-a2a1-9e45abfd61c2"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InBoat
        m_InBoat = asset.FindActionMap("InBoat", throwIfNotFound: true);
        m_InBoat_Movement = m_InBoat.FindAction("Movement", throwIfNotFound: true);
        // AsCharacter
        m_AsCharacter = asset.FindActionMap("AsCharacter", throwIfNotFound: true);
        m_AsCharacter_Movement = m_AsCharacter.FindAction("Movement", throwIfNotFound: true);
        m_AsCharacter_Fire = m_AsCharacter.FindAction("Fire", throwIfNotFound: true);
        m_AsCharacter_SecondaryAction = m_AsCharacter.FindAction("SecondaryAction", throwIfNotFound: true);
        // TargetReticle
        m_TargetReticle = asset.FindActionMap("TargetReticle", throwIfNotFound: true);
        m_TargetReticle_Target = m_TargetReticle.FindAction("Target", throwIfNotFound: true);
        m_TargetReticle_Accelerate = m_TargetReticle.FindAction("Accelerate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InBoat
    private readonly InputActionMap m_InBoat;
    private List<IInBoatActions> m_InBoatActionsCallbackInterfaces = new List<IInBoatActions>();
    private readonly InputAction m_InBoat_Movement;
    public struct InBoatActions
    {
        private @PlayerInput m_Wrapper;
        public InBoatActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InBoat_Movement;
        public InputActionMap Get() { return m_Wrapper.m_InBoat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InBoatActions set) { return set.Get(); }
        public void AddCallbacks(IInBoatActions instance)
        {
            if (instance == null || m_Wrapper.m_InBoatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InBoatActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IInBoatActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IInBoatActions instance)
        {
            if (m_Wrapper.m_InBoatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInBoatActions instance)
        {
            foreach (var item in m_Wrapper.m_InBoatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InBoatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InBoatActions @InBoat => new InBoatActions(this);

    // AsCharacter
    private readonly InputActionMap m_AsCharacter;
    private List<IAsCharacterActions> m_AsCharacterActionsCallbackInterfaces = new List<IAsCharacterActions>();
    private readonly InputAction m_AsCharacter_Movement;
    private readonly InputAction m_AsCharacter_Fire;
    private readonly InputAction m_AsCharacter_SecondaryAction;
    public struct AsCharacterActions
    {
        private @PlayerInput m_Wrapper;
        public AsCharacterActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_AsCharacter_Movement;
        public InputAction @Fire => m_Wrapper.m_AsCharacter_Fire;
        public InputAction @SecondaryAction => m_Wrapper.m_AsCharacter_SecondaryAction;
        public InputActionMap Get() { return m_Wrapper.m_AsCharacter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AsCharacterActions set) { return set.Get(); }
        public void AddCallbacks(IAsCharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_AsCharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AsCharacterActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @SecondaryAction.started += instance.OnSecondaryAction;
            @SecondaryAction.performed += instance.OnSecondaryAction;
            @SecondaryAction.canceled += instance.OnSecondaryAction;
        }

        private void UnregisterCallbacks(IAsCharacterActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @SecondaryAction.started -= instance.OnSecondaryAction;
            @SecondaryAction.performed -= instance.OnSecondaryAction;
            @SecondaryAction.canceled -= instance.OnSecondaryAction;
        }

        public void RemoveCallbacks(IAsCharacterActions instance)
        {
            if (m_Wrapper.m_AsCharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAsCharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_AsCharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AsCharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AsCharacterActions @AsCharacter => new AsCharacterActions(this);

    // TargetReticle
    private readonly InputActionMap m_TargetReticle;
    private List<ITargetReticleActions> m_TargetReticleActionsCallbackInterfaces = new List<ITargetReticleActions>();
    private readonly InputAction m_TargetReticle_Target;
    private readonly InputAction m_TargetReticle_Accelerate;
    public struct TargetReticleActions
    {
        private @PlayerInput m_Wrapper;
        public TargetReticleActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Target => m_Wrapper.m_TargetReticle_Target;
        public InputAction @Accelerate => m_Wrapper.m_TargetReticle_Accelerate;
        public InputActionMap Get() { return m_Wrapper.m_TargetReticle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TargetReticleActions set) { return set.Get(); }
        public void AddCallbacks(ITargetReticleActions instance)
        {
            if (instance == null || m_Wrapper.m_TargetReticleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TargetReticleActionsCallbackInterfaces.Add(instance);
            @Target.started += instance.OnTarget;
            @Target.performed += instance.OnTarget;
            @Target.canceled += instance.OnTarget;
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
        }

        private void UnregisterCallbacks(ITargetReticleActions instance)
        {
            @Target.started -= instance.OnTarget;
            @Target.performed -= instance.OnTarget;
            @Target.canceled -= instance.OnTarget;
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
        }

        public void RemoveCallbacks(ITargetReticleActions instance)
        {
            if (m_Wrapper.m_TargetReticleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITargetReticleActions instance)
        {
            foreach (var item in m_Wrapper.m_TargetReticleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TargetReticleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TargetReticleActions @TargetReticle => new TargetReticleActions(this);
    public interface IInBoatActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IAsCharacterActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSecondaryAction(InputAction.CallbackContext context);
    }
    public interface ITargetReticleActions
    {
        void OnTarget(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
    }
}
